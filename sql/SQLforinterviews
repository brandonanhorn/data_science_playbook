QUESTION 1)
Write a SQL querty to count the number of unique users per day who logged in from
both Iphone and web, where iPhone logs and web logs are in distinct relations.

# DB Fiddle data
--------------------------------------------
CREATE TABLE web (
  ts timestamp,
  userid int,
  web_sessionid int
);

CREATE TABLE iphone (
  ts timestamp,
  userid int,
  iphone_sessionid int
);

INSERT INTO web (ts, userid, web_sessionid)
VALUES
  (now(), 1, 100),
  (now() - INTERVAL '1 hour', 1, 101),
  (now() - INTERVAL '1 day', 2, 103)
  ;

INSERT INTO iphone(ts, userid, iphone_sessionid)
VALUES
  (now(), 1, 100),
  (now() - INTERVAL '2 hour', 1, 101),
  (now() - INTERVAL '1 day', 3, 103)
  ;


# CODE
--------------------------------------------
SELECT DATE_TRUNC('day', i.ts) AS day,
  COUNT(DISTINCT i.userid) AS num_users
FROM iphone i
JOIN web w
  ON i.userid = w.userid
  AND DATE_TRUNC('day', i.ts) = DATE_TRUNC('day', w.ts)
GROUP BY 1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
QUESTION 2)
Write a SQL query to find out the overall friend acceptance rate for each day.
friend_requests: ds | sender | receiver | action (Sent, accepted, rejected etc)

# DB Fiddle data
--------------------------------------------
CREATE TABLE friend_requests (
  ds date,
  sender int,
  receiver int,
  action varchar
);

INSERT INTO friend_requests (ds, sender, receiver, action)
VALUES
  (CURRENT_DATE, 1, 2, 'sent'),
  (CURRENT_DATE, 1, 3, 'accepted'),
  (CURRENT_DATE - 1, 1, 5, 'rejected'),
  (CURRENT_DATE - 1, 1, 3, 'accepted'),
  (CURRENT_DATE - 2, 2, 3, 'accepted')
  ;

# CODE
SELECT ds,
  COUNT(CASE WHEN action = 'accepted' THEN 1
  ELSE NULL END) * 1.00/COUNT(action) * 100 AS perc_acceptance
FROM friend_requests
GROUP BY 1
